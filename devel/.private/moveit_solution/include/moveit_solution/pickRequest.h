// Generated by gencpp from file moveit_solution/pickRequest.msg
// DO NOT EDIT!


#ifndef MOVEIT_SOLUTION_MESSAGE_PICKREQUEST_H
#define MOVEIT_SOLUTION_MESSAGE_PICKREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace moveit_solution
{
template <class ContainerAllocator>
struct pickRequest_
{
  typedef pickRequest_<ContainerAllocator> Type;

  pickRequest_()
    : grasp_point()  {
    }
  pickRequest_(const ContainerAllocator& _alloc)
    : grasp_point(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _grasp_point_type;
  _grasp_point_type grasp_point;





  typedef boost::shared_ptr< ::moveit_solution::pickRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::moveit_solution::pickRequest_<ContainerAllocator> const> ConstPtr;

}; // struct pickRequest_

typedef ::moveit_solution::pickRequest_<std::allocator<void> > pickRequest;

typedef boost::shared_ptr< ::moveit_solution::pickRequest > pickRequestPtr;
typedef boost::shared_ptr< ::moveit_solution::pickRequest const> pickRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::moveit_solution::pickRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::moveit_solution::pickRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::moveit_solution::pickRequest_<ContainerAllocator1> & lhs, const ::moveit_solution::pickRequest_<ContainerAllocator2> & rhs)
{
  return lhs.grasp_point == rhs.grasp_point;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::moveit_solution::pickRequest_<ContainerAllocator1> & lhs, const ::moveit_solution::pickRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace moveit_solution

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::moveit_solution::pickRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::moveit_solution::pickRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::moveit_solution::pickRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::moveit_solution::pickRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::moveit_solution::pickRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::moveit_solution::pickRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::moveit_solution::pickRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d93662c5e0ca355997429f17104dddc8";
  }

  static const char* value(const ::moveit_solution::pickRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd93662c5e0ca3559ULL;
  static const uint64_t static_value2 = 0x97429f17104dddc8ULL;
};

template<class ContainerAllocator>
struct DataType< ::moveit_solution::pickRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "moveit_solution/pickRequest";
  }

  static const char* value(const ::moveit_solution::pickRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::moveit_solution::pickRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point grasp_point\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::moveit_solution::pickRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::moveit_solution::pickRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.grasp_point);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pickRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::moveit_solution::pickRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::moveit_solution::pickRequest_<ContainerAllocator>& v)
  {
    s << indent << "grasp_point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.grasp_point);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEIT_SOLUTION_MESSAGE_PICKREQUEST_H
