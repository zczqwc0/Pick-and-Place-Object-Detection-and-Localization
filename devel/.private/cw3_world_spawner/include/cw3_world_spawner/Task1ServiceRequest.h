// Generated by gencpp from file cw3_world_spawner/Task1ServiceRequest.msg
// DO NOT EDIT!


#ifndef CW3_WORLD_SPAWNER_MESSAGE_TASK1SERVICEREQUEST_H
#define CW3_WORLD_SPAWNER_MESSAGE_TASK1SERVICEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PointStamped.h>
#include <geometry_msgs/PointStamped.h>

namespace cw3_world_spawner
{
template <class ContainerAllocator>
struct Task1ServiceRequest_
{
  typedef Task1ServiceRequest_<ContainerAllocator> Type;

  Task1ServiceRequest_()
    : object_point()
    , goal_point()
    , shape_type()  {
    }
  Task1ServiceRequest_(const ContainerAllocator& _alloc)
    : object_point(_alloc)
    , goal_point(_alloc)
    , shape_type(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::PointStamped_<ContainerAllocator>  _object_point_type;
  _object_point_type object_point;

   typedef  ::geometry_msgs::PointStamped_<ContainerAllocator>  _goal_point_type;
  _goal_point_type goal_point;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _shape_type_type;
  _shape_type_type shape_type;





  typedef boost::shared_ptr< ::cw3_world_spawner::Task1ServiceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cw3_world_spawner::Task1ServiceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct Task1ServiceRequest_

typedef ::cw3_world_spawner::Task1ServiceRequest_<std::allocator<void> > Task1ServiceRequest;

typedef boost::shared_ptr< ::cw3_world_spawner::Task1ServiceRequest > Task1ServiceRequestPtr;
typedef boost::shared_ptr< ::cw3_world_spawner::Task1ServiceRequest const> Task1ServiceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cw3_world_spawner::Task1ServiceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cw3_world_spawner::Task1ServiceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cw3_world_spawner::Task1ServiceRequest_<ContainerAllocator1> & lhs, const ::cw3_world_spawner::Task1ServiceRequest_<ContainerAllocator2> & rhs)
{
  return lhs.object_point == rhs.object_point &&
    lhs.goal_point == rhs.goal_point &&
    lhs.shape_type == rhs.shape_type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cw3_world_spawner::Task1ServiceRequest_<ContainerAllocator1> & lhs, const ::cw3_world_spawner::Task1ServiceRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cw3_world_spawner

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cw3_world_spawner::Task1ServiceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cw3_world_spawner::Task1ServiceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cw3_world_spawner::Task1ServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cw3_world_spawner::Task1ServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cw3_world_spawner::Task1ServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cw3_world_spawner::Task1ServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cw3_world_spawner::Task1ServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ee66ea1bcc1704a8551b6f7b84e9cf9e";
  }

  static const char* value(const ::cw3_world_spawner::Task1ServiceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xee66ea1bcc1704a8ULL;
  static const uint64_t static_value2 = 0x551b6f7b84e9cf9eULL;
};

template<class ContainerAllocator>
struct DataType< ::cw3_world_spawner::Task1ServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cw3_world_spawner/Task1ServiceRequest";
  }

  static const char* value(const ::cw3_world_spawner::Task1ServiceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cw3_world_spawner::Task1ServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/PointStamped object_point\n"
"geometry_msgs/PointStamped goal_point\n"
"string shape_type\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PointStamped\n"
"# This represents a Point with reference coordinate frame and timestamp\n"
"Header header\n"
"Point point\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::cw3_world_spawner::Task1ServiceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cw3_world_spawner::Task1ServiceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.object_point);
      stream.next(m.goal_point);
      stream.next(m.shape_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Task1ServiceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cw3_world_spawner::Task1ServiceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cw3_world_spawner::Task1ServiceRequest_<ContainerAllocator>& v)
  {
    s << indent << "object_point: ";
    s << std::endl;
    Printer< ::geometry_msgs::PointStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.object_point);
    s << indent << "goal_point: ";
    s << std::endl;
    Printer< ::geometry_msgs::PointStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.goal_point);
    s << indent << "shape_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.shape_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CW3_WORLD_SPAWNER_MESSAGE_TASK1SERVICEREQUEST_H
