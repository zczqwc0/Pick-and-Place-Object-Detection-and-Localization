// Generated by gencpp from file cw3_team_14/exampleRequest.msg
// DO NOT EDIT!


#ifndef CW3_TEAM_14_MESSAGE_EXAMPLEREQUEST_H
#define CW3_TEAM_14_MESSAGE_EXAMPLEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>

namespace cw3_team_14
{
template <class ContainerAllocator>
struct exampleRequest_
{
  typedef exampleRequest_<ContainerAllocator> Type;

  exampleRequest_()
    : example_float(0.0)
    , example_int(0)
    , example_string()
    , example_pose()
    , example_std_vector_of_poses()  {
    }
  exampleRequest_(const ContainerAllocator& _alloc)
    : example_float(0.0)
    , example_int(0)
    , example_string(_alloc)
    , example_pose(_alloc)
    , example_std_vector_of_poses(_alloc)  {
  (void)_alloc;
    }



   typedef double _example_float_type;
  _example_float_type example_float;

   typedef int32_t _example_int_type;
  _example_int_type example_int;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _example_string_type;
  _example_string_type example_string;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _example_pose_type;
  _example_pose_type example_pose;

   typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Pose_<ContainerAllocator> >> _example_std_vector_of_poses_type;
  _example_std_vector_of_poses_type example_std_vector_of_poses;





  typedef boost::shared_ptr< ::cw3_team_14::exampleRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cw3_team_14::exampleRequest_<ContainerAllocator> const> ConstPtr;

}; // struct exampleRequest_

typedef ::cw3_team_14::exampleRequest_<std::allocator<void> > exampleRequest;

typedef boost::shared_ptr< ::cw3_team_14::exampleRequest > exampleRequestPtr;
typedef boost::shared_ptr< ::cw3_team_14::exampleRequest const> exampleRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cw3_team_14::exampleRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cw3_team_14::exampleRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cw3_team_14::exampleRequest_<ContainerAllocator1> & lhs, const ::cw3_team_14::exampleRequest_<ContainerAllocator2> & rhs)
{
  return lhs.example_float == rhs.example_float &&
    lhs.example_int == rhs.example_int &&
    lhs.example_string == rhs.example_string &&
    lhs.example_pose == rhs.example_pose &&
    lhs.example_std_vector_of_poses == rhs.example_std_vector_of_poses;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cw3_team_14::exampleRequest_<ContainerAllocator1> & lhs, const ::cw3_team_14::exampleRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cw3_team_14

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cw3_team_14::exampleRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cw3_team_14::exampleRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cw3_team_14::exampleRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cw3_team_14::exampleRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cw3_team_14::exampleRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cw3_team_14::exampleRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cw3_team_14::exampleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "16f08f6abcc9049e818ebd0c826029fc";
  }

  static const char* value(const ::cw3_team_14::exampleRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x16f08f6abcc9049eULL;
  static const uint64_t static_value2 = 0x818ebd0c826029fcULL;
};

template<class ContainerAllocator>
struct DataType< ::cw3_team_14::exampleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cw3_team_14/exampleRequest";
  }

  static const char* value(const ::cw3_team_14::exampleRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cw3_team_14::exampleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# this is the request message\n"
"float64 example_float\n"
"int32 example_int\n"
"string example_string\n"
"geometry_msgs/Pose example_pose\n"
"geometry_msgs/Pose[] example_std_vector_of_poses\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::cw3_team_14::exampleRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cw3_team_14::exampleRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.example_float);
      stream.next(m.example_int);
      stream.next(m.example_string);
      stream.next(m.example_pose);
      stream.next(m.example_std_vector_of_poses);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct exampleRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cw3_team_14::exampleRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cw3_team_14::exampleRequest_<ContainerAllocator>& v)
  {
    s << indent << "example_float: ";
    Printer<double>::stream(s, indent + "  ", v.example_float);
    s << indent << "example_int: ";
    Printer<int32_t>::stream(s, indent + "  ", v.example_int);
    s << indent << "example_string: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.example_string);
    s << indent << "example_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.example_pose);
    s << indent << "example_std_vector_of_poses[]" << std::endl;
    for (size_t i = 0; i < v.example_std_vector_of_poses.size(); ++i)
    {
      s << indent << "  example_std_vector_of_poses[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "    ", v.example_std_vector_of_poses[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CW3_TEAM_14_MESSAGE_EXAMPLEREQUEST_H
