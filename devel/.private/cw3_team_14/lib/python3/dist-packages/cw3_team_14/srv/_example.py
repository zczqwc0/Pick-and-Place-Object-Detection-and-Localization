# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cw3_team_14/exampleRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class exampleRequest(genpy.Message):
  _md5sum = "16f08f6abcc9049e818ebd0c826029fc"
  _type = "cw3_team_14/exampleRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# this is the request message
float64 example_float
int32 example_int
string example_string
geometry_msgs/Pose example_pose
geometry_msgs/Pose[] example_std_vector_of_poses

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['example_float','example_int','example_string','example_pose','example_std_vector_of_poses']
  _slot_types = ['float64','int32','string','geometry_msgs/Pose','geometry_msgs/Pose[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       example_float,example_int,example_string,example_pose,example_std_vector_of_poses

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(exampleRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.example_float is None:
        self.example_float = 0.
      if self.example_int is None:
        self.example_int = 0
      if self.example_string is None:
        self.example_string = ''
      if self.example_pose is None:
        self.example_pose = geometry_msgs.msg.Pose()
      if self.example_std_vector_of_poses is None:
        self.example_std_vector_of_poses = []
    else:
      self.example_float = 0.
      self.example_int = 0
      self.example_string = ''
      self.example_pose = geometry_msgs.msg.Pose()
      self.example_std_vector_of_poses = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_di().pack(_x.example_float, _x.example_int))
      _x = self.example_string
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.example_pose.position.x, _x.example_pose.position.y, _x.example_pose.position.z, _x.example_pose.orientation.x, _x.example_pose.orientation.y, _x.example_pose.orientation.z, _x.example_pose.orientation.w))
      length = len(self.example_std_vector_of_poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.example_std_vector_of_poses:
        _v1 = val1.position
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v2 = val1.orientation
        _x = _v2
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.example_pose is None:
        self.example_pose = geometry_msgs.msg.Pose()
      if self.example_std_vector_of_poses is None:
        self.example_std_vector_of_poses = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.example_float, _x.example_int,) = _get_struct_di().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.example_string = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.example_string = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.example_pose.position.x, _x.example_pose.position.y, _x.example_pose.position.z, _x.example_pose.orientation.x, _x.example_pose.orientation.y, _x.example_pose.orientation.z, _x.example_pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.example_std_vector_of_poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v3 = val1.position
        _x = _v3
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v4 = val1.orientation
        _x = _v4
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.example_std_vector_of_poses.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_di().pack(_x.example_float, _x.example_int))
      _x = self.example_string
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.example_pose.position.x, _x.example_pose.position.y, _x.example_pose.position.z, _x.example_pose.orientation.x, _x.example_pose.orientation.y, _x.example_pose.orientation.z, _x.example_pose.orientation.w))
      length = len(self.example_std_vector_of_poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.example_std_vector_of_poses:
        _v5 = val1.position
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v6 = val1.orientation
        _x = _v6
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.example_pose is None:
        self.example_pose = geometry_msgs.msg.Pose()
      if self.example_std_vector_of_poses is None:
        self.example_std_vector_of_poses = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.example_float, _x.example_int,) = _get_struct_di().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.example_string = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.example_string = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.example_pose.position.x, _x.example_pose.position.y, _x.example_pose.position.z, _x.example_pose.orientation.x, _x.example_pose.orientation.y, _x.example_pose.orientation.z, _x.example_pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.example_std_vector_of_poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v7 = val1.position
        _x = _v7
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v8 = val1.orientation
        _x = _v8
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.example_std_vector_of_poses.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_di = None
def _get_struct_di():
    global _struct_di
    if _struct_di is None:
        _struct_di = struct.Struct("<di")
    return _struct_di
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cw3_team_14/exampleResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class exampleResponse(genpy.Message):
  _md5sum = "21f33296fbcf2cd9ca27d7591c7a3051"
  _type = "cw3_team_14/exampleResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# this is the return message
bool success
geometry_msgs/Point[] example_std_vector_of_points

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['success','example_std_vector_of_points']
  _slot_types = ['bool','geometry_msgs/Point[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success,example_std_vector_of_points

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(exampleResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
      if self.example_std_vector_of_points is None:
        self.example_std_vector_of_points = []
    else:
      self.success = False
      self.example_std_vector_of_points = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
      length = len(self.example_std_vector_of_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.example_std_vector_of_points:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.example_std_vector_of_points is None:
        self.example_std_vector_of_points = None
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.example_std_vector_of_points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.example_std_vector_of_points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
      length = len(self.example_std_vector_of_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.example_std_vector_of_points:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.example_std_vector_of_points is None:
        self.example_std_vector_of_points = None
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.example_std_vector_of_points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.example_std_vector_of_points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class example(object):
  _type          = 'cw3_team_14/example'
  _md5sum = '978efc3b4d217b6a9fca06d03983e5b2'
  _request_class  = exampleRequest
  _response_class = exampleResponse
